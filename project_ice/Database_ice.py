# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Database.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Database
_M_Database = Ice.openModule('Database')
__name__ = 'Database'

_M_Database._t_UserInfo = IcePy.defineValue('::Database::UserInfo', Ice.Value, -1, (), False, True, None, ())

if 'UserInfoPrx' not in _M_Database.__dict__:
    _M_Database.UserInfoPrx = Ice.createTempClass()
    class UserInfoPrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_Database.UserInfo._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_Database.UserInfo._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Database.UserInfo._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_Database.UserInfo._op_getName.end(self, _r)

        def getPhoneNumber(self, context=None):
            return _M_Database.UserInfo._op_getPhoneNumber.invoke(self, ((), context))

        def getPhoneNumberAsync(self, context=None):
            return _M_Database.UserInfo._op_getPhoneNumber.invokeAsync(self, ((), context))

        def begin_getPhoneNumber(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Database.UserInfo._op_getPhoneNumber.begin(self, ((), _response, _ex, _sent, context))

        def end_getPhoneNumber(self, _r):
            return _M_Database.UserInfo._op_getPhoneNumber.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Database.UserInfoPrx.ice_checkedCast(proxy, '::Database::UserInfo', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Database.UserInfoPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Database::UserInfo'
    _M_Database._t_UserInfoPrx = IcePy.defineProxy('::Database::UserInfo', UserInfoPrx)

    _M_Database.UserInfoPrx = UserInfoPrx
    del UserInfoPrx

    _M_Database.UserInfo = Ice.createTempClass()
    class UserInfo(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Database::UserInfo', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Database::UserInfo'

        @staticmethod
        def ice_staticId():
            return '::Database::UserInfo'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def getPhoneNumber(self, current=None):
            raise NotImplementedError("servant method 'getPhoneNumber' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Database._t_UserInfoDisp)

        __repr__ = __str__

    _M_Database._t_UserInfoDisp = IcePy.defineClass('::Database::UserInfo', UserInfo, (), None, ())
    UserInfo._ice_type = _M_Database._t_UserInfoDisp

    UserInfo._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    UserInfo._op_getPhoneNumber = IcePy.Operation('getPhoneNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Database.UserInfo = UserInfo
    del UserInfo

_M_Database._t_UpdateInfo = IcePy.defineValue('::Database::UpdateInfo', Ice.Value, -1, (), False, True, None, ())

if 'UpdateInfoPrx' not in _M_Database.__dict__:
    _M_Database.UpdateInfoPrx = Ice.createTempClass()
    class UpdateInfoPrx(Ice.ObjectPrx):

        def authenticate(self, password, context=None):
            return _M_Database.UpdateInfo._op_authenticate.invoke(self, ((password, ), context))

        def authenticateAsync(self, password, context=None):
            return _M_Database.UpdateInfo._op_authenticate.invokeAsync(self, ((password, ), context))

        def begin_authenticate(self, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_Database.UpdateInfo._op_authenticate.begin(self, ((password, ), _response, _ex, _sent, context))

        def end_authenticate(self, _r):
            return _M_Database.UpdateInfo._op_authenticate.end(self, _r)

        def changeName(self, newName, context=None):
            return _M_Database.UpdateInfo._op_changeName.invoke(self, ((newName, ), context))

        def changeNameAsync(self, newName, context=None):
            return _M_Database.UpdateInfo._op_changeName.invokeAsync(self, ((newName, ), context))

        def begin_changeName(self, newName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Database.UpdateInfo._op_changeName.begin(self, ((newName, ), _response, _ex, _sent, context))

        def end_changeName(self, _r):
            return _M_Database.UpdateInfo._op_changeName.end(self, _r)

        def changeNumber(self, newNumber, context=None):
            return _M_Database.UpdateInfo._op_changeNumber.invoke(self, ((newNumber, ), context))

        def changeNumberAsync(self, newNumber, context=None):
            return _M_Database.UpdateInfo._op_changeNumber.invokeAsync(self, ((newNumber, ), context))

        def begin_changeNumber(self, newNumber, _response=None, _ex=None, _sent=None, context=None):
            return _M_Database.UpdateInfo._op_changeNumber.begin(self, ((newNumber, ), _response, _ex, _sent, context))

        def end_changeNumber(self, _r):
            return _M_Database.UpdateInfo._op_changeNumber.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Database.UpdateInfoPrx.ice_checkedCast(proxy, '::Database::UpdateInfo', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Database.UpdateInfoPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Database::UpdateInfo'
    _M_Database._t_UpdateInfoPrx = IcePy.defineProxy('::Database::UpdateInfo', UpdateInfoPrx)

    _M_Database.UpdateInfoPrx = UpdateInfoPrx
    del UpdateInfoPrx

    _M_Database.UpdateInfo = Ice.createTempClass()
    class UpdateInfo(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Database::UpdateInfo', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Database::UpdateInfo'

        @staticmethod
        def ice_staticId():
            return '::Database::UpdateInfo'

        def authenticate(self, password, current=None):
            raise NotImplementedError("servant method 'authenticate' not implemented")

        def changeName(self, newName, current=None):
            raise NotImplementedError("servant method 'changeName' not implemented")

        def changeNumber(self, newNumber, current=None):
            raise NotImplementedError("servant method 'changeNumber' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Database._t_UpdateInfoDisp)

        __repr__ = __str__

    _M_Database._t_UpdateInfoDisp = IcePy.defineClass('::Database::UpdateInfo', UpdateInfo, (), None, ())
    UpdateInfo._ice_type = _M_Database._t_UpdateInfoDisp

    UpdateInfo._op_authenticate = IcePy.Operation('authenticate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    UpdateInfo._op_changeName = IcePy.Operation('changeName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    UpdateInfo._op_changeNumber = IcePy.Operation('changeNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_Database.UpdateInfo = UpdateInfo
    del UpdateInfo

# End of module Database
